git: 파일버전 기록 프로그램
terminal -> git init (레포지토리 생성)
git add 파일명
git commit -m '메모사항'
파일의 현재 상태를 기록함
staging area -> commit 하기 전에 commit할 파일들을 골라놓음
repository -> commit된 파일의 버전들을 모아놓음
add -> 파일 스테이징
git add . -> 모든 파일 스테이징
git status -> 상태 확인
git log --all --oneline -> 커밋 내역 조회
새 기능 만들었을 때 등등 commit 하기

vscode 왼쪽 깃아이콘
+ 버튼으로 git add
위의 체크버튼으로 git commit
message란에 메모 입력
파일 많고 복잡할 때 유용

commit 전에 현재 vs 최근commit 차이점 확인
git diff 명령으로 차이점 분석 가능
-> 명령 입력 후 hjkl로 스크롤바 조작, q로 종료
근데 잘 안 씀
git difftool 으로 시각적으로 비교 가능
git difftool 커밋아이디 명령어로 커밋의 차이점 비교

git graph 확장팩 설치 -> 왼쪽 상단에서 아이콘 클릭해서
                        비교 기능 사용 가능
<<<<<<< HEAD

branch 기능 (복사본)
git branch 브랜치명 -> 브랜치 생성
git switch 브랜치명 -> 브랜치로 이동
main branch / master branch
각각의 브랜치는 독립적으로 사용
git merge 새브랜치명 -> 현재 브랜치와 해당 브랜치를 합침
merge 시 충돌할 수 있음 -> 수동해결
merge 후에도 브랜치는 여전히 남아 있음
git branch -d 브랜치명 -> merge 완료한 브랜치 삭제
git branch -D 브랜치명 -> merge 안 한 브랜치 삭제
3-way merge
fast-forward merge
rebase -> 브랜치를 다른 곳에 이어 붙임 (깔끔하게 이어 붙이기)
새 브랜치로 이동 -> git rebase 중심브랜치명 
    -> 중심브랜치로 이동 -> git merge 새브랜치명
squash and merge -> main 브랜치의 로그를 깔끔하게
git switch main -> git merge --squash 새브랜치

온라인 레포지토리 -> 협업, 백업 등
git push -u 원격저장소주소 올릴로컬브랜치명
레포지토리 주소를 변수로 등록가능
git remote add 변수명 주소 -> 주소가 변수명에 할당됨